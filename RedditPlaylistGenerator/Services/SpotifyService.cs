using Microsoft.Extensions.Options;
using RedditPlaylistGenerator.Model;
using RedditPlaylistGenerator.Options;
using System.Diagnostics;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;

namespace RedditPlaylistGenerator.Services
{
    public class SpotifyService
    {
        private readonly ILogger _logger;
        private readonly HttpClient _spotifyClient;
        private readonly IOptions<SpotifyOptions> _spotifyOptions;


        public SpotifyService(ILogger<SpotifyService> logger, HttpClient spotifyClient, IOptions<SpotifyOptions> spotifyOptions)
        {
            _logger = logger;
            _spotifyClient = spotifyClient;
            _spotifyOptions = spotifyOptions;
        }
        public async Task<string> GeneratePlaylist(string accessToken, SongNamesResult songNamesResult)
        {
            _spotifyClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
            var songUris = await GetSongUris(songNamesResult.SongNames);
            var userId = await GetUserId();
            var playlistId = await CreatePlaylist($"Reddit: {songNamesResult.PostTitle}", userId);
            await AddSongsToPlaylist(songUris, playlistId.Id);

            return playlistId.ExternalUrls.Spotify;
        }

        private async Task<IList<string>> GetSongUris(IList<string> songNames)
        {
            var songUriTasks = songNames
                .Select(GetSongUri);

            try
            {
                var songUris = await Task.WhenAll(songUriTasks);
                return songUris.Where(s => s != null).Cast<string>().ToList();
            }
            catch
            {
                throw new Exception("Failed to retrieve song uris.");
            }

        }

        private async Task<string?> GetSongUri(string songName)
        {

            Debug.WriteLine($"Searching for song: {songName}");



            var encodedSongName = Uri.EscapeDataString(songName);

            var res = await _spotifyClient.GetAsync($"search?q={encodedSongName}&type=track");

            if (res.StatusCode == System.Net.HttpStatusCode.TooManyRequests && res.Headers.TryGetValues("Retry-After", out var values))
            {
                var retryAfterStr = values.FirstOrDefault("30");
                var delaySeconds = int.Parse(retryAfterStr);
                await Task.Delay(delaySeconds * 1000);
                return await GetSongUri(songName);
            }

            if (!res.IsSuccessStatusCode)
            {
                Debug.WriteLine($"Failed to search for song: {songName}");
                return null;
            }

            var responseContent = await res.Content.ReadFromJsonAsync<SpotifySearch>();

            if (responseContent == null)
            {
                Debug.WriteLine("Failed to read response content.");
                return null;
            }

            if (!responseContent.Tracks.Items.Any())
            {
                return null;
            }

            return responseContent.Tracks.Items[0].Uri;
        }

        private async Task<string> GetUserId()
        {
            var res = await _spotifyClient.GetAsync("me");

            res.EnsureSuccessStatusCode();

            var responseContent = await res.Content.ReadFromJsonAsync<SpotifyUser>();

            if (responseContent == null)
            {
                throw new HttpRequestException("Failed to retrieve spotify user id.");
            }

            return responseContent.Id;
        }

        private async Task<SpotifyPlaylist> CreatePlaylist(string playlistName, string userId)
        {
            var res = await _spotifyClient.PostAsync($"users/{userId}/playlists",
                new StringContent(
                    JsonSerializer.Serialize(new { name = playlistName, description = "Generated by RedditPlaylistGenerator" }),
                    Encoding.UTF8,
                    "application/json"
                    )
            );

            res.EnsureSuccessStatusCode();

            var responseContent = await res.Content.ReadFromJsonAsync<SpotifyPlaylist>();

            if (responseContent == null)
            {
                throw new HttpRequestException("Failed to create spotify playlist.");
            }

            return responseContent;
        }

        private async Task AddSongsToPlaylist(IList<string> songUris, string id)
        {
            var tasks = songUris.Chunk(100).ToList().Select(async chunk =>
            {
                var test = new { uris = chunk };


                var res = await _spotifyClient.PostAsync($"playlists/{id}/tracks",
                          new StringContent(
                              JsonSerializer.Serialize(new { uris = chunk }),
                              Encoding.UTF8,
                              "application/json"
                              )
                      );

                res.EnsureSuccessStatusCode();
            });

            try
            {
                await Task.WhenAll(tasks);
            }
            catch
            {
                throw new HttpRequestException("Failed to add songs to playlist.");
            }
        }
    }
}
